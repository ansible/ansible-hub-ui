name: Cypress

on:
  # allow running manually
  workflow_dispatch:
  pull_request:
    branches: [ 'master', 'stable-*', 'feature/*' ]
  push:
    branches: [ 'master', 'stable-*', 'feature/*' ]
  # daily on master
  schedule:
  - cron: '30 5 * * *'

concurrency:
  group: cypress-${{ github.ref }}
  cancel-in-progress: true

jobs:
  cypress:
    runs-on: ubuntu-latest
    env:
      # base of a PR, or pushed-to branch outside PRs, or master
      BRANCH: ${{ github.base_ref || github.ref || 'refs/heads/master' }}

    strategy:
      fail-fast: false
      matrix:
        test:
        - 'collections'
        - 'approval'
        - 'execution_environments'
        - 'namespaces'
        - 'groups_and_users'
        - 'repo'
        - 'misc'
        - 'imports'
        - 'insights'

    steps:

    - name: "Install galaxykit dependency"
      run: |
        # pip install git+https://github.com/ansible/galaxykit.git@branch_name
        pip install git+https://github.com/ansible/galaxykit.git

    - name: "Set env.SHORT_BRANCH, GALAXY_NG_COMMIT, COMPOSE_PROFILE, API_BASE"
      run: |
        SHORT_BRANCH=`sed 's/^refs\/heads\///' <<< $BRANCH`
        GALAXY_NG_COMMIT=`curl -s https://api.github.com/repos/ansible/galaxy_ng/branches/${SHORT_BRANCH} | jq -r .commit.sha`
        COMPOSE_PROFILE=`[ "${{ matrix.test }}" = 'insights' ] && echo 'insights' || echo 'standalone'`
        API_PORT=`[ "$COMPOSE_PROFILE" = "standalone" ] && echo '8002' || echo '5001'`
        API_BASE=http://localhost:"$API_PORT"/api/`[ "$COMPOSE_PROFILE" = 'standalone' ] && echo 'galaxy' || echo 'automation-hub'`

        # blow up without galaxy_ng commit info
        [ -n "$GALAXY_NG_COMMIT" ]

        echo "SHORT_BRANCH=${SHORT_BRANCH}" >> $GITHUB_ENV
        echo "GALAXY_NG_COMMIT=${GALAXY_NG_COMMIT}" >> $GITHUB_ENV
        echo "COMPOSE_PROFILE=${COMPOSE_PROFILE}" >> $GITHUB_ENV
        echo "API_PORT=${API_PORT}" >> $GITHUB_ENV
        echo "API_BASE=${API_BASE}" >> $GITHUB_ENV

    - run: "mkdir pulp_galaxy_ng"

    - name: "Cache container image for pulp_galaxy_ng ${{ env.SHORT_BRANCH }} ${{ env.GALAXY_NG_COMMIT }}"
      id: cache-container
      uses: actions/cache@v3
      with:
        path: pulp_galaxy_ng/image
        key: pulp-galaxy-ng-${{ env.SHORT_BRANCH }}-${{ env.GALAXY_NG_COMMIT }}

    - name: "Checkout ansible-hub-ui (${{ github.ref }})"
      uses: actions/checkout@v3
      with:
        path: 'ansible-hub-ui'

    - name: "Build pulp-galaxy-ng"
      if: steps.cache-container.outputs.cache-hit != 'true'
      working-directory: 'pulp_galaxy_ng'
      run: |
        cp -aiv ../ansible-hub-ui/.github/workflows/cypress/* .
        sed -i \
          -e 's|\$REPO|ansible/galaxy_ng|' \
          -e 's|\$BRANCH|${{ env.SHORT_BRANCH }}|' \
          Containerfile

        buildah bud --file Containerfile --tag localhost/pulp/pulp-galaxy-ng:latest .
        rm -f image # ensure older version is gone, podman save errors otherwise
        podman save localhost/pulp/pulp-galaxy-ng:latest -o image

    - name: "Load pulp-galaxy-ng from cache"
      if: steps.cache-container.outputs.cache-hit == 'true'
      working-directory: 'pulp_galaxy_ng'
      run: podman load -i image

    - name: "Configure and run pulp-galaxy-ng"
      working-directory: 'pulp_galaxy_ng'
      run: |
        # static unused in insights
        mkdir settings static
        cp -aiv ../ansible-hub-ui/.github/workflows/cypress/settings.py."$COMPOSE_PROFILE" settings/settings.py

        podman run \
             --detach \
             --publish "$API_PORT":80 \
             --name pulp \
             --volume "$(pwd)/settings":/etc/pulp \
             --volume "$(pwd)/static":/galaxy_ng_static \
             --tmpfs /var/lib/pulp \
             --tmpfs /var/lib/pgsql \
             --tmpfs /var/lib/containers \
             --device /dev/fuse \
             localhost/pulp/pulp-galaxy-ng:latest

    - name: "Install node 16"
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: "Cache ~/.npm & ~/.cache/Cypress"
      uses: actions/cache@v3
      with:
        path: |
          ~/.npm
          ~/.cache/Cypress
        key: npm-${{ env.SHORT_BRANCH }}-${{ hashFiles('ansible-hub-ui/**/package-lock.json') }}
        restore-keys: |
          npm-${{ env.SHORT_BRANCH }}-
          npm-

    - name: "Build standalone UI"
      if: ${{ env.COMPOSE_PROFILE == 'standalone' }}
      working-directory: 'ansible-hub-ui'
      run: |
        npm install

        # production displays unknown translations literally, make sure it's up to date
        npm run gettext:extract
        npm run gettext:compile

        npm run build-standalone

        # save the App.*.js hash for later verification
        BUILD_HASH=`ls dist/js/App*js | cut -d. -f2,3`
        echo "BUILD_HASH=${BUILD_HASH}" >> $GITHUB_ENV

        rm -rf ../pulp_galaxy_ng/static/galaxy_ng/ || true
        mv -v dist/ ../pulp_galaxy_ng/static/galaxy_ng

        # apply changes, runs collectstatic and serves static assets
        podman exec --user pulp:pulp pulp bash -c "PULP_STATIC_ROOT=/var/lib/operator/static/ PULP_CONTENT_ORIGIN=localhost /usr/local/bin/pulpcore-manager collectstatic --clear --noinput --link"
        podman exec pulp bash -c "s6-svc -r /var/run/s6-rc/servicedirs/pulpcore-api"

    - name: "Run insights UI"
      if: ${{ env.COMPOSE_PROFILE == 'insights' }}
      working-directory: 'ansible-hub-ui'
      run: |
        npm install

        # production displays unknown translations literally, make sure it's up to date
        npm run gettext:extract
        npm run gettext:compile

        # pre-pull containers (and check for version changes)
        FROM=node_modules/@redhat-cloud-services/frontend-components-config-utilities/standalone/services/
        grep postgres:9.6 "$FROM"/rbac.js
        docker pull postgres:9.6
        grep redis:5.0.4 "$FROM"/rbac.js
        docker pull redis:5.0.4
        grep quay.io/cloudservices/rbac "$FROM"/rbac.js
        docker pull quay.io/cloudservices/rbac
        grep jboss/keycloak "$FROM"/default/chrome.js
        docker pull jboss/keycloak

        npm run start &

    - name: "Reset admin password"
      run: |
        # podman exec pulp pip install django_extensions
        podman exec pulp pulpcore-manager reset-admin-password --password admin

    - name: "Enable signing service"
      run: |
        podman exec --user pulp:pulp pulp /tmp/signing-setup.sh

    - name: "Install Cypress & test dependencies"
      working-directory: 'ansible-hub-ui/test'
      run: |
        npm install

    - name: "Configure Cypress"
      working-directory: 'ansible-hub-ui/test'
      run: |
        cp -aiv ../.github/workflows/cypress/cypress.env.json."$COMPOSE_PROFILE" cypress.env.json

    - name: "Ensure index.html uses the new js"
      if: ${{ env.COMPOSE_PROFILE == 'standalone' }}
      run: |
        echo 'expecting /static/galaxy_ng/js/App.'"$BUILD_HASH"'.js'
        curl http://localhost:8002/static/galaxy_ng/index.html | tee /dev/stderr | grep '/static/galaxy_ng/js/App.'"$BUILD_HASH"'.js'

    - name: "Ensure insights is served"
      if: ${{ env.COMPOSE_PROFILE == 'insights' }}
      run: |
        echo wait for containers to start
        curl http://localhost:8002/beta/ansible/automation-hub/ | tee /dev/stderr | grep '/beta/apps/chrome/js/'

    - name: "Ensure galaxykit can connect to the server"
      if: ${{ env.COMPOSE_PROFILE == 'standalone' }}
      run: |
        galaxykit -s "$API_BASE"/ -u admin -p admin collection list

    - name: "Check initial feature flags"
      run: |
        curl -s "$API_BASE"/_ui/v1/feature-flags/ | jq

    - name: "Check component versions"
      if: ${{ env.COMPOSE_PROFILE == 'standalone' }}
      run: |
        HUB_TOKEN=`curl -s -u admin:admin -d '' "$API_BASE"/v3/auth/token/ | jq -r .token`
        curl -s -H "Authorization: Token $HUB_TOKEN" "$API_BASE"/ | jq

    - name: "Check if e2e contains only dirs in matrix test array"
      working-directory: 'ansible-hub-ui'
      run: |
        diff -Naur <(ls test/cypress/e2e) <(yq '.jobs.cypress.strategy.matrix.test[]' .github/workflows/cypress.yml | sort)

    - name: "Run cypress"
      working-directory: 'ansible-hub-ui/test'
      run: |
        sed -i '/specPattern:/s/\*\*/${{matrix.test}}/' cypress.config.js
        echo "result of the config file:"
        cat cypress.config.js
        npm run cypress:chrome

    - uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: screenshots_and_videos
        path: |
          ansible-hub-ui/test/cypress/screenshots
          ansible-hub-ui/test/cypress/videos

    - name: "Kill container, show debug info"
      if: always()
      run: |
        podman exec pulp bash -c "pip3 list && pip3 install pipdeptree && pipdeptree"
        podman logs pulp
        podman kill pulp
