name: Cypress

on:
  # allow running manually
  workflow_dispatch:
  pull_request:
    branches: [ 'master', 'stable-*', 'feature/*' ]
  push:
    branches: [ 'master', 'stable-*', 'feature/*' ]
  # daily on master
  schedule:
  - cron: '30 5 * * *'

concurrency:
  group: cypress-${{ github.ref }}
  cancel-in-progress: true

jobs:
  cypress:
    runs-on: ubuntu-latest
    env:
      # base of a PR, or pushed-to branch outside PRs, or master
      BRANCH: ${{ github.base_ref || github.ref || 'refs/heads/master' }}

    strategy:
      fail-fast: false
      matrix:
        test:
        - 'collections'
        - 'approval'
        - 'execution_environments'
        - 'namespaces'
        - 'groups_and_users'
        - 'repo'
        - 'misc'
        - 'imports'

    steps:

    - name: "Install galaxykit"
      run: |
        # pip install git+https://github.com/ansible/galaxykit.git@branch_name
        pip install git+https://github.com/ansible/galaxykit.git

    - name: "Set env.SHORT_BRANCH, env.GALAXY_NG_COMMIT"
      run: |
        SHORT_BRANCH=`sed 's/^refs\/heads\///' <<< $BRANCH`
        GALAXY_NG_COMMIT=`curl -s https://api.github.com/repos/ansible/galaxy_ng/branches/${SHORT_BRANCH} | jq -r .commit.sha`

        # blow up without galaxy_ng commit info
        [ -n "$GALAXY_NG_COMMIT" ]

        echo "SHORT_BRANCH=${SHORT_BRANCH}" >> $GITHUB_ENV
        echo "GALAXY_NG_COMMIT=${GALAXY_NG_COMMIT}" >> $GITHUB_ENV

    - name: "ansible-hub-ui ref ${{ github.ref }}"
      run: 'true'

    - name: "galaxy_ng branch ${{ env.SHORT_BRANCH }}"
      run: 'true'

    - name: "galaxy_ng commit ${{ env.GALAXY_NG_COMMIT }}"
      run: 'true'

    - name: "Checkout ansible-hub-ui"
      uses: actions/checkout@v3
      with:
        path: 'ansible-hub-ui'

    - name: "Checkout galaxy_ng"
      uses: actions/checkout@v3
      with:
        repository: 'ansible/galaxy_ng'
        ref: '${{ env.SHORT_BRANCH }}'
        path: 'galaxy_ng'

    - name: "Checkout oci_env"
      uses: actions/checkout@v3
      with:
        repository: 'pulp/oci_env'
        path: 'oci_env'

    - name: "Checkout galaxy_ng#1423"
      uses: actions/checkout@v3
      with:
        repository: 'ansible/galaxy_ng'
        path: 'galaxy_ng_1423'
        ref: 'refs/pull/1423/head'

    - name: "Copy profiles/"
      run: '[ -d galaxy_ng/profiles/ ] || mv galaxy_ng_1423/profiles/ galaxy_ng/'

    - name: "Configure oci_env"
      working-directory: 'oci_env'
      run: |
        pip3 install -e client

        echo '\
          COMPOSE_PROFILE=galaxy_ng/base
          DEV_SOURCE_PATH=galaxy_ng
          COMPOSE_BINARY=docker
          DJANGO_SUPERUSER_USERNAME=admin
          DJANGO_SUPERUSER_PASSWORD=admin
        ' | sed 's/^\s\+//' | tee compose.env

    - name: "oci-env compose build"
      working-directory: 'oci_env'
      run: 'oci-env compose build'

    - name: "oci-env compose up"
      working-directory: 'oci_env'
      run: 'oci-env compose up &'

    - name: "Install node 16"
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: "Cache ~/.npm & ~/.cache/Cypress"
      uses: actions/cache@v3
      with:
        path: |
          ~/.npm
          ~/.cache/Cypress
        key: ${{ runner.os }}-node-${{ env.SHORT_BRANCH }}-${{ hashFiles('ansible-hub-ui/**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ env.SHORT_BRANCH }}-
          ${{ runner.os }}-node-

    - name: "Build standalone UI"
      working-directory: 'ansible-hub-ui'
      run: |
        npm install

        # production displays unknown translations literally, make sure it's up to date
        npm run gettext:extract
        npm run gettext:compile

        npm run build-standalone

        # save the App.*.js hash for later verification
        BUILD_HASH=`ls dist/js/App*js | cut -d. -f2,3`
        echo "BUILD_HASH=${BUILD_HASH}" >> $GITHUB_ENV

    - name: "Serve standalone UI"
      run: |
        mkdir -p www/static/
        mv ansible-hub-ui/dist www/static/galaxy_ng
        cd www
        echo '{}' > package.json
        npm install local-web-server
        node_modules/.bin/ws --port 8002 --directory . --spa static/galaxy_ng/index.html --rewrite '/api/(.*) -> http://localhost:5001/api/$1' &

    - name: "Install Cypress & test dependencies"
      working-directory: 'ansible-hub-ui/test'
      run: |
        npm install

    - name: "Configure Cypress"
      working-directory: 'ansible-hub-ui/test'
      run: |
        echo -e '{
          "prefix": "/api/galaxy/",
          "pulpPrefix": "/api/galaxy/pulp/api/v3/",
          "username": "admin",
          "password": "admin",
          "settings": "../../galaxy_ng/galaxy_ng/app/settings.py",
          "restart": "sleep 10",
          "containers": "localhost:8002",
          "galaxykit": "galaxykit --ignore-certs"
        }' > cypress.env.json

    - name: "Ensure index.html uses the new js"
      run: |
        echo 'expecting /static/galaxy_ng/js/App.'"$BUILD_HASH"'.js'
        curl http://localhost:8002/static/galaxy_ng/index.html | tee /dev/stderr | grep '/static/galaxy_ng/js/App.'"$BUILD_HASH"'.js'

    - name: "Ensure galaxykit can connect to the server"
      run: |
        galaxykit -s 'http://localhost:8002/api/galaxy/' -u admin -p admin collection list

    - name: "Check initial feature flags"
      run: |
        curl -s http://localhost:8002/api/galaxy/_ui/v1/feature-flags/ | jq

    - name: "Check component versions"
      run: |
        HUB_TOKEN=`curl -s -u admin:admin -d '' http://localhost:8002/api/galaxy/v3/auth/token/ | jq -r .token`
        curl -s -H "Authorization: Token $HUB_TOKEN" http://localhost:8002/api/galaxy/ | jq

    - name: "Check if e2e contains only dirs in matrix test array"
      working-directory: 'ansible-hub-ui'
      run: |
        diff -Naur <(ls test/cypress/e2e) <(yq '.jobs.cypress.strategy.matrix.test[]' .github/workflows/cypress.yml | sort)

    - name: "Run cypress"
      working-directory: 'ansible-hub-ui/test'
      run: |
        sed -i '/specPattern:/s/\*\*/${{matrix.test}}/' cypress.config.js
        echo "result of the config file:"
        cat cypress.config.js
        npm run cypress:chrome

    - uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: screenshots_and_videos
        path: |
          ansible-hub-ui/test/cypress/screenshots
          ansible-hub-ui/test/cypress/videos

    - name: "Kill container, show debug info"
      if: always()
      working-directory: 'oci_env'
      run: |
        oci-env exec bash -c "pip3 list && pip3 install pipdeptree && pipdeptree"
        oci-env compose logs
        oci-env compose down
