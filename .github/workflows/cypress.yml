name: Cypress

on:
  # allow running manually
  workflow_dispatch:
  pull_request:
    branches: [ 'master', 'stable-*', 'feature/*' ]
  push:
    branches: [ 'master', 'stable-*', 'feature/*' ]
  # daily on master
  schedule:
  - cron: '30 5 * * *'

concurrency:
  group: cypress-${{ github.ref }}
  cancel-in-progress: true

jobs:
  cypress:
    runs-on: ubuntu-latest
    env:
      # base of a PR, or pushed-to branch outside PRs, or master
      BRANCH: ${{ github.base_ref || github.ref || 'refs/heads/master' }}

    strategy:
      fail-fast: false
      matrix:
        test:
        - 'approval'
        - 'collections'
        - 'ee_controller'
        - 'execution_environments'
        - 'groups_and_users'
        - 'imports'
        - 'insights'
        - 'misc'
        - 'namespaces'
        - 'repo'
        - 'view-only-access'
        - 'view-only-download'

    steps:

    - name: "Install galaxykit dependency"
      run: |
        # pip install git+https://github.com/ansible/galaxykit.git@branch_name
        pip install git+https://github.com/ansible/galaxykit.git

    - name: "Set env.SHORT_BRANCH, COMPOSE_PROFILE"
      run: |
        SHORT_BRANCH=`sed 's/^refs\/heads\///' <<< $BRANCH`
        COMPOSE_PROFILE=`[ "${{ matrix.test }}" = 'insights' ] && echo 'insights' || echo 'standalone'`

        echo "SHORT_BRANCH=${SHORT_BRANCH}" >> $GITHUB_ENV
        echo "COMPOSE_PROFILE=${COMPOSE_PROFILE}" >> $GITHUB_ENV

    - name: "Checkout ansible-hub-ui (${{ github.ref }})"
      uses: actions/checkout@v3
      with:
        path: 'ansible-hub-ui'

    - name: "Checkout galaxy_ng (${{ env.SHORT_BRANCH }})"
      uses: actions/checkout@v3
      with:
        repository: 'ansible/galaxy_ng'
        ref: '${{ env.SHORT_BRANCH }}'
        path: 'galaxy_ng'

    - name: "Checkout oci_env (main)"
      uses: actions/checkout@v3
      with:
        repository: 'pulp/oci_env'
        path: 'oci_env'

    - name: "Configure oci_env"
      working-directory: 'oci_env'
      run: |
        pip install --editable ./client/

        # merge common, profile-specific and test matrix specific config
        cat ../ansible-hub-ui/.github/workflows/cypress/compose.env.common \
          ../ansible-hub-ui/.github/workflows/cypress/compose.env."$COMPOSE_PROFILE" \
          ../ansible-hub-ui/test/cypress/e2e/"${{ matrix.test }}"/compose.env \
          | sed 's/^\s\+//' | tee compose.env || [ -s compose.env ]

    - name: "oci-env compose build"
      working-directory: 'oci_env'
      run: 'oci-env compose build'

    - name: "oci-env compose up"
      working-directory: 'oci_env'
      run: 'oci-env compose up &'

    - name: "Install node 16"
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: "Cache ~/.npm & ~/.cache/Cypress"
      uses: actions/cache@v3
      with:
        path: |
          ~/.npm
          ~/.cache/Cypress
        key: npm-${{ env.SHORT_BRANCH }}-${{ hashFiles('ansible-hub-ui/**/package-lock.json') }}
        restore-keys: |
          npm-${{ env.SHORT_BRANCH }}-
          npm-

    - name: "Build standalone UI"
      if: ${{ env.COMPOSE_PROFILE == 'standalone' }}
      working-directory: 'ansible-hub-ui'
      run: |
        npm install

        # production displays unknown translations literally, make sure it's up to date
        npm run gettext:extract
        npm run gettext:compile

        npm run build-standalone

        # save the App.*.js hash for later verification
        BUILD_HASH=`ls dist/js/App*js | cut -d. -f2,3`
        echo "BUILD_HASH=${BUILD_HASH}" >> $GITHUB_ENV

    - name: "Serve standalone UI"
      if: ${{ env.COMPOSE_PROFILE == 'standalone' }}
      run: |
        mkdir -p www/static/
        mv ansible-hub-ui/dist www/static/galaxy_ng
        cd www
        echo '{}' > package.json
        npm install local-web-server
        node_modules/.bin/ws --port 8002 --directory . --spa static/galaxy_ng/index.html \
          --rewrite '/api/(.*) -> http://localhost:5001/api/$1' \
          --rewrite '/pulp/api/(.*) -> http://localhost:5001/pulp/api/$1' \
          --rewrite '/v2/(.*) -> http://localhost:5001/v2/$1' \
          --rewrite '/extensions/v2/(.*) -> http://localhost:5001/extensions/v2/$1' &

    - name: "Run insights UI"
      if: ${{ env.COMPOSE_PROFILE == 'insights' }}
      working-directory: 'ansible-hub-ui'
      run: |
        npm install

        # production displays unknown translations literally, make sure it's up to date
        npm run gettext:extract
        npm run gettext:compile

        # pre-pull containers (and check for version changes)
        FROM=node_modules/@redhat-cloud-services/frontend-components-config-utilities/standalone/services/
        grep postgres:9.6 "$FROM"/rbac.js
        docker pull postgres:9.6
        grep redis:5.0.4 "$FROM"/rbac.js
        docker pull redis:5.0.4
        grep quay.io/cloudservices/rbac "$FROM"/rbac.js
        docker pull quay.io/cloudservices/rbac
        grep jboss/keycloak "$FROM"/default/chrome.js
        docker pull jboss/keycloak

        npm run start &

    - name: "Install Cypress & test dependencies"
      working-directory: 'ansible-hub-ui/test'
      run: |
        npm install

    - name: "Configure Cypress"
      working-directory: 'ansible-hub-ui/test'
      run: |
        cp -aiv ../.github/workflows/cypress/cypress.env.json."$COMPOSE_PROFILE" cypress.env.json

    - name: "Ensure index.html uses the new js"
      if: ${{ env.COMPOSE_PROFILE == 'standalone' }}
      run: |
        echo 'expecting /static/galaxy_ng/js/App.'"$BUILD_HASH"'.js'
        curl http://localhost:8002/static/galaxy_ng/index.html | tee /dev/stderr | grep '/static/galaxy_ng/js/App.'"$BUILD_HASH"'.js'

    - name: "Ensure insights is served"
      if: ${{ env.COMPOSE_PROFILE == 'insights' }}
      run: |
        echo waiting for containers to start
        sleep 30
        curl http://localhost:8002/beta/ansible/automation-hub/ | tee /dev/stderr | grep '/beta/apps/chrome/js/'
        sleep 30

    - name: "Ensure galaxykit can connect to API (standalone)"
      if: ${{ env.COMPOSE_PROFILE == 'standalone' }}
      run: |
        galaxykit -s http://localhost:8002/api/galaxy/ -u admin -p admin collection list

    - name: "Ensure galaxykit can connect to API (insights)"
      if: ${{ env.COMPOSE_PROFILE == 'insights' }}
      run: |
        galaxykit -s http://localhost:8002/api/automation-hub/ \
          -u admin -p admin \
          --auth-url http://localhost:8002/auth/realms/redhat-external/protocol/openid-connect/token \
          collection list

    - name: "Check initial feature flags (standalone)"
      if: ${{ env.COMPOSE_PROFILE == 'standalone' }}
      run: |
        curl -s http://localhost:5001/api/galaxy/_ui/v1/feature-flags/ | jq

    - name: "Check initial feature flags (insights)"
      if: ${{ env.COMPOSE_PROFILE == 'insights' }}
      run: |
        curl -s http://localhost:5001/api/automation-hub/_ui/v1/feature-flags/ | jq

    - name: "Check component versions & settings (standalone)"
      if: ${{ env.COMPOSE_PROFILE == 'standalone' }}
      run: |
        HUB_TOKEN=`curl -s -u admin:admin -d '' http://localhost:5001/api/galaxy/v3/auth/token/ | jq -r .token`
        curl -s -H "Authorization: Token $HUB_TOKEN" http://localhost:5001/api/galaxy/ | jq
        curl -s -H "Authorization: Token $HUB_TOKEN" http://localhost:5001/api/galaxy/_ui/v1/settings/ | jq

    - name: "Check component versions & settings (insights)"
      if: ${{ env.COMPOSE_PROFILE == 'insights' }}
      run: |
        BEARER=`curl -s -H "Content-Type: application/x-www-form-urlencoded" \
          -d "client_id=cloud-services&username=admin&password=admin&grant_type=password" \
          http://localhost:8002/auth/realms/redhat-external/protocol/openid-connect/token | jq -r .access_token`
        curl -s -H "Authorization: Bearer $BEARER" http://localhost:8002/api/automation-hub/ | jq
        curl -s -H "Authorization: Bearer $BEARER" http://localhost:8002/api/automation-hub/_ui/v1/settings/ | jq

    - name: "Check if e2e contains only dirs in matrix test array"
      working-directory: 'ansible-hub-ui'
      run: |
        diff -Naur <(ls test/cypress/e2e) <(yq '.jobs.cypress.strategy.matrix.test[]' .github/workflows/cypress.yml | sort)

    - name: "Run cypress"
      working-directory: 'ansible-hub-ui/test'
      run: |
        sed -i '/specPattern:/s/\*\*/${{matrix.test}}/' cypress.config.js
        grep specPattern cypress.config.js

        npm run cypress:chrome

    - uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: screenshots_and_videos
        path: |
          ansible-hub-ui/test/cypress/screenshots
          ansible-hub-ui/test/cypress/videos

    - name: "Kill container, show debug info"
      if: always()
      working-directory: 'oci_env'
      run: |
        oci-env exec bash -c "pip3 list && pip3 install pipdeptree && pipdeptree"
        oci-env compose logs
        oci-env compose kill
